/* 模式名称：代理模式
 * 模式分类：结构型模式
 * 简单概述：为其他对象提供一种代理以控制对这个对象的访问
 * 使用场景：一、远程代理，为一个对象在不同的地址空间提供局部代表，这样可以隐藏
 * 						一个对象存在于不同地址空间的事实
 * 			 二、虚拟代理，根据需要创建开销很大的对象，通过它来存放需要实例化需要
 * 			 			很长时间的对象，它可以有实例化对象的部分属性进行提前使用，
 * 			 			也可以在具体需要使用到的时候再实例化，达到性能最优化
 * 			 三、安全代理，用来控制真实对象访问时的权限，可以损失一些透明性
 * 			 四、智能指引，当调用真实的对象时，通过代理在访问一个对象时附加一些内务处理
 */
#include <iostream>
#include <string>

using std::cout;
using std::endl;

 IConfigManager* instance( )
 {
    return CConfigManager::instance();
 }